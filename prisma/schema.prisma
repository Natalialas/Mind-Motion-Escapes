generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model Tour {
  id          String    @id @default(uuid())
  name        String
  description String   @db.VarChar(1000)
  price       Int
  duration    Int
  dat         String
  location    String
  photo       String
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  String
  reviews     Review[]
  orders      Order[]   @relation("TourOrder")
  cartItems   CartItem[]
  photos      Photo[]

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Photo {
  id      String @id @default(uuid())
  url     String
  tour    Tour   @relation(fields: [tourId], references: [id], onDelete: Cascade)
  tourId  String
}

model Order {
  id             String    @id @default(uuid())
  clientName     String
  clientSurname  String
  email          String 
  phone          String
  address        String
  finalAmount    Int
  comment        String?

  tours          Tour[]    @relation("TourOrder")
  user           User      @relation(fields: [userId], references: [id])
  userId         String

  items          CartItem[]

  status         String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model User {
  id       String @id @default(uuid())
  name     String
  surname  String
  email    String    @unique
  phone    String
  country  String
  city     String
  role     Role      @default(USER)
  password Password?
  reviews  Review[]
  orders   Order[]
}

model Password {
  id              String @id @default(uuid())
  hashedPassword  String
  user            User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String @unique
}

model Category {
  id    String @id @default(uuid())
  name  String
  tours Tour[]
}

model Review {
  id       String @id @default(uuid())
  rating   Int
  comment  String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  tour     Tour   @relation(fields: [tourId], references: [id], onDelete: Cascade)
  tourId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id             String    @id @default(uuid())
  tour           Tour      @relation(fields: [tourId], references: [id], onDelete: Cascade)
  tourId         String
  order          Order?    @relation(fields: [orderId], references: [id])
  orderId        String?

  numberOfPeople Int
  price          Int

  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

